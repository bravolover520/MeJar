package me.utils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import android.content.Context;

/**
 * res 目录
 * @author Jesus{931178805@qq.com}
 * 2014年7月31日
 */
public class ResourceUtils {

	/**
	 * 得到具体id
	 * @param context
	 * @param resId		资源名
	 * @param type		资源类型 (string/drawable/id ...)
	 * @return
	 */
	public static int getResourceIdByName(Context context, String resId, String type) {
		return context.getResources().getIdentifier(resId, type, context.getPackageName());		
	}
	
	/**
	 * 根据strings.xml 中的资源名得到id
	 * @param context
	 * @param stringId
	 * @return
	 */
	public static int getStringIdByName(Context context, String stringId) {
		return context.getResources().getIdentifier(stringId, "string", context.getPackageName());		
	}
	
	/**
	 * 根据drawables.xml 中的资源名得到id
	 * @param context
	 * @param drawableId
	 * @return
	 */
	public static int getDrawableIdByName(Context context, String drawableId) {
		return context.getResources().getIdentifier(drawableId, "drawable", context.getPackageName());
	}
	
	/**
	 * 根据ids.xml 中的资源名得到id
	 * @param context
	 * @param componentId
	 * @return
	 */
	public static int getComponentIdByName(Context context, String componentId) {
		return context.getResources().getIdentifier(componentId, "id", context.getPackageName());
	}
	
	/***
	 * 根据resourceId得到String
	 * @param context
	 * @param resourceId
	 * @return
	 */
	public static String getStringResourceValue(Context context, int resourceId) {
		return context.getResources().getString(resourceId);
	}
	
	/**
     * get an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an
     * application as assets -- that is, files placed in to the "assets" directory.
     * 
     * @param context
     * @param fileName The name of the asset to open. This name can be hierarchical.
     * @return
     */
    public static String geFileFromAssets(Context context, String fileName) {
        if (context == null || StringUtils.isEmpty(fileName)) {
            return null;
        }

        StringBuilder s = new StringBuilder("");
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * get content from a raw resource. This can only be used with resources whose value is the name of an
     * asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and
     * color resources.
     * 
     * @param context
     * @param resId The resource identifier to open, as generated by the appt tool.
     * @return
     */
    public static String geFileFromRaw(Context context, int resId) {
        if (context == null) {
            return null;
        }

        StringBuilder s = new StringBuilder();
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
